{"version":3,"sources":["components/card/index.js","components/board/index.js","deck.js","index.js","App.js"],"names":["Card","_ref","handleClick","id","type","flipped","height","width","solved","disabled","react_default","a","createElement","className","concat","style","onClick","alt","src","Board","dimension","cards","map","card","key","includes","initializeDeck","array","_array","slice","i","length","randomIndex","Math","floor","random","temp","shuffle","reduce","acc","push","ReactDOM","render","_useState","useState","_useState2","Object","slicedToArray","setCards","_useState3","_useState4","setFlipped","_useState5","_useState6","setDimension","_useState7","_useState8","setSolved","_useState9","_useState10","setDisabled","useEffect","resizeBoard","preloadImages","resizeListener","window","addEventListener","removeEventListener","Image","resetCards","sameCardClicked","isMatch","clickedCard","find","min","document","documentElement","clientWidth","clientHeight","handleCLick","toConsumableArray","setTimeout","getElementById"],"mappings":"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","file":"static/js/main.cd2295e5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './styles.css'\n\n\nexport default function Card({\n    handleClick,\n    id,\n    type,\n    flipped,\n    height,\n    width,\n    solved,\n    disabled,\n}) {\n    return (\n        <div\n            className={`flip-container ${flipped ? 'flipped' : ''}`}\n            style={{\n                width,\n                height,\n            }}\n            onClick={() => (disabled ? null : handleClick(id))}\n        >\n            <div className=\"flipper\">\n                <img alt=\"\"\n                    style={{\n                        height,\n                        width,\n                    }}\n                    className={flipped ? 'front' : 'back'}\n                    src={flipped || solved ? `/img/${type}.png` :\n                        '/img/back.png'}\n                />\n            </div>\n        </div>\n    )\n}\n\nCard.propTypes = {\n    handleClick: PropTypes.func.isRequired,\n    id: PropTypes.number.isRequired,\n    flipped: PropTypes.bool.isRequired,\n    solved: PropTypes.bool.isRequired,\n    type: PropTypes.string.isRequired,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    disabled: PropTypes.bool.isRequired\n}","import React from 'react';\nimport PropTypes from 'prop-types'\n\nimport Card from '../card'\nimport './styles.css'\n\nexport default function Board({ \n    disabled, \n    dimension, \n    cards, \n    flipped,\n    solved,\n    handleClick \n}) {\n    return (\n        <div className=\"board\">\n            {cards.map((card) => (\n                <Card\n                    key={card.id}\n                    id={card.id}\n                    type={card.type}\n                    width={dimension / 4.5}\n                    height={dimension / 4.5}\n                    flipped={flipped.includes(card.id)}\n                    solved={solved.includes(cards.id)}\n                    handleClick={handleClick}\n                    disabled={disabled || solved.includes(cards.id)}\n                />\n            ))}\n        </div>\n    )\n}\nBoard.propTypes = {\n    disabled: PropTypes.bool.isRequired,\n    dimension: PropTypes.number.isRequired,\n    cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\n    solved: PropTypes.arrayOf(PropTypes.number).isRequired,\n    handleCLick: PropTypes.func.isRequired\n}","function shuffle(array){\n    const _array = array.slice(0)\n    for(let i=0;i<array.length -1;i++){\n        let randomIndex = Math.floor(Math.random()* (i+1))\n        let temp = _array[i]\n        _array[i] = _array[randomIndex]\n        _array[randomIndex] = temp\n    }\n\n    return _array\n}\n\nexport default function initializeDeck(){\n    let id = 0\n    const cards = ['allen-iverson', 'blake-griffin', 'carmelo-anthony', \n    'demar-derozan', 'devin-booker', 'draymond-green', 'james-harden', \n    'allen-iverson'\n\n    ].reduce((acc, type) => {\n        acc.push({\n            id: id++,\n            type\n        })\n        acc.push({\n            id: id++,\n            type\n        })\n        return acc\n    }, [])\n\n    return shuffle(cards)\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import React, { useState, useEffect } from 'react';\nimport Board from './components/board'\nimport initializeDeck from './deck'\n\nexport default function App(){\n  const [cards, setCards] = useState([])\n  const [flipped, setFlipped] = useState([])\n  const [dimension, setDimension] = useState(400)\n  const [solved, setSolved] = useState([])\n  const [disabled, setDisabled] = useState(false)\n\n  useEffect(() => {\n    resizeBoard()\n    setCards(initializeDeck())\n  }, [])\n\n  useEffect(() => {\n    preloadImages()\n  }, cards)\n\n  //create event listener to resize the board\n  useEffect(() =>{\n    const resizeListener = window.addEventListener('resize',\n      resizeBoard)\n    //return value to clean up and remove the event listener\n      return () => window.removeEventListener('resize', resizeListener)\n  })\n\n  const handleClick = (id) => {\n    setDisabled(true)\n    if(flipped.length === 0){\n      setFlipped([id])\n      setDisabled(false)\n    } else{\n      if(sameCardClicked(id)) \n      return\n      setFlipped([flipped[0], id])\n      if(isMatch(id)){\n        setSolved([...solved, flipped[0], id])\n        resetCards()\n      } else{\n        setTimeout(resetCards, 1000)\n      }\n    }\n  }\n\n  const preloadImages = () => {\n    cards.map((card) => {\n      const src = `/img/${card.type}.png`\n      new Image().src = src\n    })\n  }\n\n  const resetCards = () =>{\n    setFlipped([])\n    setDisabled(false)\n  }\n  const sameCardClicked = (id) => flipped.includes(id)\n\n  const isMatch = (id) =>{\n    const clickedCard = cards.find((card) => card.id === id)\n    const flippedCard = cards.find((card) => flipped[0] === card.id)\n    return flippedCard.type === clickedCard.type\n  }\n\n  const resizeBoard = () =>{\n    setDimension(Math.min(\n      document.documentElement.clientWidth,\n      document.documentElement.clientHeight\n    ),\n    )\n  }\n\n  return (\n    <div>\n      <h1>React Clicky Game</h1>\n      <h2>can you rememeber where the NBA players are</h2>\n      <Board\n        dimension={dimension}\n        cards={cards}\n        flipped={flipped}\n        handleCLick={handleClick}\n        disabled={disabled}\n        solved={solved}\n        />\n    </div>\n  )\n}"],"sourceRoot":""}